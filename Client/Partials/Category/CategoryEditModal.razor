@using SmartphonePortal_Vervoort_Wagner.Shared.Requests
@using SmartphonePortal_Vervoort_Wagner.Shared.ViewModels
@inject HttpClient Client

<EditForm EditContext="@editContext">
    <!-- Main modal -->
    <div class="fixed absolute z-45 w-full sm:p-4 overflow-x-hidden overflow-y-auto md:inset-0 md:h-full"
         id="defaultModal"
         tabindex="-1">
        <div class="relative w-full h-full max-w-2xl md:h-auto mx-auto">

            <!-- Modal content -->
            <div class="relative bg-gray-100 rounded-lg shadow">

                <!-- Modal header -->
                <div class="flex items-start justify-between p-4 border-b rounded-t">
                    <h3 class="text-xl font-semibold text-gray-900">
                        Edit Category
                    </h3>
                    <button class="text-gray-500 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center"
                            type="button"
                            @onclick=@Cancel>
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                        <span class="sr-only">Close modal</span>
                    </button>
                </div>
                @if (RequestInProcess)
                {
                    <Loader />
                }
                <!-- Modal body -->
                <div class="p-6 space-y-6">

                    <div class="flex flex-col my-2">
                        <label class="block mb-2 text-gray-900" for="name_input">
                            Name
                        </label>
                        <InputText class="px-2 rounded border border-gray-400 bg-white h-10"
                                   @bind-Value="@CategoryUpdate.Name"
                                   id="name_input"
                                   type="email" />
                        <div class="text-sm text-red-600">
                            <ValidationMessage For=@( () => CategoryUpdate.Name) />
                        </div>
                    </div>
                </div>

                <!-- Modal footer -->
                <div class="flex justify-end p-6 space-x-2 border-t border-gray-200 rounded-b">
                    <button class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center"
                            type="button"
                            @onclick=@Save>
                        Save
                    </button>
                    <button class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10"
                            type="button"
                            @onclick=@Cancel>
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public CategoryViewModel Category { get; set; } = new();

    public CategoryUpdateRequest CategoryUpdate { get; set; } = new();
    public bool RequestInProcess { get; set; }

    private EditContext? editContext;

    protected override Task OnInitializedAsync()
    {
        editContext = new(CategoryUpdate);
        editContext?.EnableDataAnnotationsValidation();

        if (Category != null)
        {
            CategoryUpdate.CategoryId = Category.CategoryId;
            CategoryUpdate.Name = Category.Name;
        }
        return base.OnInitializedAsync();
    }

    private Task Cancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private async Task Save()
    {
        if (editContext == null)
        {
            Console.WriteLine("EditContext is null in CategoryEditModal");
            return;
        }

        if (!editContext.Validate())
        {
            return;
        }


        RequestInProcess = true;
        var response = await Client.PostAsync("Category/update", JsonContent.Create<CategoryUpdateRequest>(CategoryUpdate));
        RequestInProcess = false;
        await OnClose.InvokeAsync(true);
    }
}
