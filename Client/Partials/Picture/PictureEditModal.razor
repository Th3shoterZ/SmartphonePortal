@using SmartphonePortal_Vervoort_Wagner.Shared.Requests
@using SmartphonePortal_Vervoort_Wagner.Shared.ViewModels
@using SmartphonePortal_Vervoort_Wagner.Shared.Responses
@using SmartphonePortal_Vervoort_Wagner.Shared.DataModel
@using System.Net.Http.Headers
@inject HttpClient Client

<EditForm EditContext="@editContext">
    <!-- Main modal -->
    <div class="fixed absolute z-100 w-full sm:p-4 overflow-x-hidden overflow-y-auto md:inset-0 md:h-full bg-gradient-to-r from-transparent via-gray-500 to-transparent"
         id="defaultModal"
         tabindex="-1">
        <div class="relative w-full h-full max-w-2xl md:h-auto mx-auto">

            <!-- Modal content -->
            <div class="relative bg-gray-100 rounded-lg shadow">

                <!-- Modal header -->
                <div class="flex items-start justify-between p-4 border-b rounded-t">
                    <h3 class="text-xl font-semibold text-gray-900">
                        Edit Picture
                    </h3>
                    <button class="text-gray-500 bg-transparent hover:bg-gray-200 hover:text-gray-900 rounded-lg text-sm p-1.5 ml-auto inline-flex items-center"
                            type="button"
                            @onclick=@Cancel>
                        <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd"></path></svg>
                        <span class="sr-only">Close modal</span>
                    </button>
                </div>
                @if (RequestInProcess)
                {
                    <Loader />
                }
                <!-- Modal body -->
                <div class="p-6 space-y-6">


                    <div class="flex flex-col my-2">
                        <label for="roles" class="block mb-2 text-gray-900">
                            Select an option
                        </label>
                        <InputSelect class="bg-white border border-gray-300 text-gray-900 text-sm rounded-lg block w-full p-2.5"
                                     @bind-Value="@Picture.SmartphoneId">
                            <option selected disabled value="">please select a phone</option>
                            @foreach (var phone in Phones)
                            {
                                <option value="@phone.SmartphoneId">@phone.Name</option>
                            }
                        </InputSelect>
                        <div class="text-sm text-red-600">
                            <ValidationMessage For=@( () => Picture.SmartphoneId) />
                        </div>
                    </div>
                    <div class="flex flex-col my-2">
                        <InputFile OnChange="@OnInputFileChange" multiple />
                        <ul>
                            @foreach (var file in files)
                            {
                                <li>
                                    File: @file.FileName
                                    <br>
                                    @if (FileUpload(uploadResults, file.FileName,
                                   out var result))
                                    {
                                        <span>
                                            Stored File Name: @result.StoredFileName
                                        </span>
                                    }
                                    else
                                    {
                                        <span>
                                            There was an error uploading the file
                                            (Error: @result.ErrorCode).
                                        </span>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                </div>

                <!-- Modal footer -->
                <div class="flex justify-end p-6 space-x-2 border-t border-gray-200 rounded-b">
                    <button class="text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center"
                            type="button"
                            @onclick=@Save>
                        Save
                    </button>
                    <button class="text-gray-500 bg-white hover:bg-gray-100 focus:ring-4 focus:outline-none focus:ring-blue-300 rounded-lg border border-gray-200 text-sm font-medium px-5 py-2.5 hover:text-gray-900 focus:z-10"
                            type="button"
                            @onclick=@Cancel>
                        Cancel
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public List<SmartphoneViewModel> Phones { get; set; } = new();
    [Parameter] public PictureViewModel Picture { get; set; } = new();

    public PictureUpdateRequest PictureUpdate { get; set; } = new();
    public bool RequestInProcess { get; set; }

    private EditContext? editContext;

    private bool UploadFiles { get; set; }
    private List<ImageFile> files = new();
    private List<FileUploadResponse> uploadResults = new();
    private int maxAllowedFiles = 1;
    private bool shouldRender;

    private MultipartFormDataContent Content { get; set; } = new();


    protected override Task OnInitializedAsync()
    {
        editContext = new(PictureUpdate);
        editContext?.EnableDataAnnotationsValidation();

        if (Picture != null)
        {
            //PictureUpdate.ProfileId = Picture.Id;
            //PictureUpdate.UserName = Picture.UserName;
            //PictureUpdate.Email = Picture.Email;
            //PictureUpdate.Role = Picture.Role;
        }
        return base.OnInitializedAsync();
    }

    private Task Cancel()
    {
        return OnClose.InvokeAsync(false);
    }
    private async Task Save()
    {
        if (editContext == null)
        {
            Console.WriteLine("EditContext is null in PictureEditModal");
            return;
        }

        if (!editContext.Validate())
        {
            return;
        }


        RequestInProcess = true;
        await UploadFile();
        //var response = await Client.PostAsync("/api/Picture/update", JsonContent.Create<PictureUpdateRequest>(PictureUpdate));
        RequestInProcess = false;
        await OnClose.InvokeAsync(true);
    }


    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        shouldRender = false;
        //long maxFileSize = 1024 * 15;
        UploadFiles = false;

        var content = new MultipartFormDataContent();

        foreach (var file in e.GetMultipleFiles(maxAllowedFiles))
        {
            if (uploadResults.SingleOrDefault(
                f => f.FileName == file.Name) is null)
            {
                try
                {
                    files.Add(new() { FileName = file.Name });

                    var fileContent =
                        new StreamContent(file.OpenReadStream());

                    fileContent.Headers.ContentType =
                        new MediaTypeHeaderValue(file.ContentType);

                    content.Add(
                        content: fileContent,
                        name: "\"files\"",
                        fileName: file.Name);

                    Content = content;
                    UploadFiles = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"{file.Name} not uploaded (Err: 6): {ex.Message}");

                    uploadResults.Add(
                        new()
                            {
                                FileName = file.Name,
                                ErrorCode = 6,
                                Uploaded = false
                            });
                }
            }
        }

        shouldRender = true;
    }

    private async Task UploadFile()
    {
        if (UploadFiles)
        {
            Console.WriteLine("uploading");
            var response = await Client.PostAsync($"/api/Picture/update/{Picture.SmartphoneId}/{Picture.PictureId}", Content);

            var newUploadResults = await response.Content
                .ReadFromJsonAsync<IList<FileUploadResponse>>();

            if (newUploadResults is not null)
            {
                uploadResults = uploadResults.Concat(newUploadResults).ToList();
            }
        }
    }

    private static bool FileUpload(IList<FileUploadResponse> uploadResults,
        string? fileName, out FileUploadResponse result)
    {
        result = uploadResults.SingleOrDefault(f => f.FileName == fileName) ?? new();

        if (!result.Uploaded)
        {
            Console.WriteLine($"{result.FileName} not uploaded (Err: 5)");
            result.ErrorCode = 5;
        }

        return result.Uploaded;
    }
}
