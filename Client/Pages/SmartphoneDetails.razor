@page "/smartphone/{SmartphoneId:int}"

@using SmartphonePortal_Vervoort_Wagner.Client.Partials
@using SmartphonePortal_Vervoort_Wagner.Shared.Requests
@using SmartphonePortal_Vervoort_Wagner.Shared.Responses
@using SmartphonePortal_Vervoort_Wagner.Shared.ViewModels
@using Microsoft.AspNetCore.WebUtilities;
@using Microsoft.Extensions.Primitives;


@inject IHttpClientFactory ClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (IsRequestInProcess)
{
    <Loader />
}
else
{
    <div class="mb-10">
        <div>
            <div class="mt-10 mx-auto max-w-3xl">
                <h1 class="text-3xl">@Smartphone.Name</h1>
                <hr />
                <div class="my-10">
                    <SmartphoneDetailsDisplay Smartphone="Smartphone" />
                </div>
            </div>
        </div>
        <AuthorizeView>
            @if (UserCanReview)
            {
                <div class="mt-10 mx-auto max-w-3xl">
                    <CreateReviewCard SmartphoneId="@SmartphoneId" OnReviewSubmitted="OnReviewSubmitted" />
                </div>
            }
        </AuthorizeView>
        <div class="mt-10 mx-auto max-w-3xl space-y-5">
            @foreach (var review in Reviews)
            {
                <ReviewCard Review="review" />
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int SmartphoneId { get; set; }
    public SmartphoneViewModel Smartphone { get; set; } = new();
    public bool IsRequestInProcess { get; set; }
    public List<ReviewViewModel> Reviews { get; set; } = new();
    public ReviewViewModel? UserReview { get; set; }
    public bool UserCanReview { get; set; }


    protected override async Task OnInitializedAsync()
    {
        IsRequestInProcess = true;
        try
        {
            await FetchData();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        await base.OnInitializedAsync();

        IsRequestInProcess = false;
    }

    private async Task FetchData()
    {
        var client = ClientFactory.CreateClient("AnonymousApi");

        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        string query = QueryHelpers.AddQueryString("/api/Smartphone/details", new Dictionary<string, string?>() {
                { "smartphoneId", SmartphoneId.ToString() },
                { "userId",  authstate.User.FindFirst(c => c.Type == "sub")?.Value } // user Id apparently stored under the "sub" type
            });
        var response = await client.GetFromJsonAsync<SmartphoneDetailsResponseModel>(query);

        if (response != null)
        {
            Smartphone = response.Smartphone;
            Reviews = response.Reviews;
            UserReview = response.UserReview;
        }

        UserCanReview = await UserCanLeaveReview();
    }

    private async Task<bool> UserCanLeaveReview()
    {
        var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authstate.User;
        bool isAuthenticated = Convert.ToBoolean(authstate.User?.Identity?.IsAuthenticated);
        return isAuthenticated && UserReview == null;
    }

    private async Task FetchReviews()
    {
        var client = ClientFactory.CreateClient("AnonymousApi");

        if (client == null) return;
        try
        {
            Reviews = await client.GetFromJsonAsync<List<ReviewViewModel>>($"/api/Review/smartphone/{SmartphoneId}") ?? new();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task OnReviewSubmitted()
    {

        IsRequestInProcess = true;
        await FetchData();
        IsRequestInProcess = false;
    }
}






