@page "/smartphone/{SmartphoneId:int}"

@using SmartphonePortal_Vervoort_Wagner.Client.Partials
@using SmartphonePortal_Vervoort_Wagner.Shared.Requests
@using SmartphonePortal_Vervoort_Wagner.Shared.ViewModels

@inject IHttpClientFactory ClientFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (IsRequestInProcess)
{
    <Loader />
}
else
{
    <div class="mb-10">
        <div>
            <div class="mt-10 mx-auto max-w-3xl">
                <h1 class="text-3xl">@Smartphone.Name</h1>
                <hr />
                <div class="my-2 space-y-2">
                    <p>
                        Made by
                        @if (string.IsNullOrEmpty(Smartphone.Manufacturer.LinkToHomePage))
                        {
                            @Smartphone.Manufacturer.Name
                        }
                        else
                        {
                            <a class="text-blue-400 hover:underline hover:text-blue-600"
                       href="@Smartphone.Manufacturer.LinkToHomePage">
                                @Smartphone.Manufacturer.Name
                            </a>
                        }
                    </p>
                    <p>
                        @Smartphone.Description
                    </p>
                    <p>
                        Resoltion: @Smartphone.Resolution
                    </p>
                    <p>
                        Display Size: @Smartphone.DisplaySize
                    </p>
                    <p>
                        Weight: @Smartphone.Weight
                    </p>
                    <p>
                        Rating: @Smartphone.Rating
                    </p>
                </div>
                <div>
                    <h4 class="font-bold text-xl">Category</h4>
                    <p>
                        @Smartphone.Category.Name
                    </p>
                </div>
                <div>
                    <h4 class="font-bold text-xl">Prozessor</h4>
                    <p>
                        @Smartphone.Processor.Title
                    </p>
                    <p>
                        @Smartphone.Processor.CoreCount
                    </p>
                    <p>
                        @Smartphone.Processor.Gigaherz
                    </p>
                </div>
            </div>
        </div>
        <AuthorizeView>
            @if (UserCanReview)
            {
                <div class="mt-10 mx-auto max-w-lg">
                    <CreateReviewCard SmartphoneId="@SmartphoneId" OnReviewSubmitted="OnReviewSubmitted" />
                </div>
            }
        </AuthorizeView>
        <div class="mt-10 mx-auto max-w-lg space-y-2">
            @foreach (var review in Reviews)
            {
                <ReviewCard Review="review" />
            }
        </div>
    </div>
}

@code {
    [Parameter]
    public int SmartphoneId { get; set; }
    public SmartphoneViewModel Smartphone { get; set; } = new();
    public bool IsRequestInProcess { get; set; }
    public List<ReviewViewModel> Reviews { get; set; } = new();
    private HttpClient? _client;
    public bool UserCanReview { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _client = ClientFactory.CreateClient("AnonymousApi");

        IsRequestInProcess = true;
        try
        {
            UserCanReview = UserCanLeaveReview();
            Smartphone = await _client.GetFromJsonAsync<SmartphoneViewModel>($"/api/Smartphone/{SmartphoneId}") ?? new();
            await FetchReviews();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
        IsRequestInProcess = false;

        await base.OnInitializedAsync();
    }

    private bool UserCanLeaveReview()
    {
        //var authstate = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //var user = authstate.User;
        //if (Convert.ToBoolean(authstate.User?.Identity?.IsAuthenticated))
        //{
        //    NewReview.UserId = user.FindFirst(c => c.Type == "sub")?.Value ?? string.Empty;
        //}
        return true;
    }

    private async Task FetchReviews()
    {
        if (_client == null) return;
        try
        {
            Reviews = await _client.GetFromJsonAsync<List<ReviewViewModel>>($"/api/Review/smartphone/{SmartphoneId}") ?? new();

        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task OnReviewSubmitted()
    {
        await FetchReviews();
    }
}






