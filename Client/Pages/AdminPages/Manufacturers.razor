@page "/admin/manufacturers"

@using Microsoft.AspNetCore.Authorization
@using SmartphonePortal_Vervoort_Wagner.Client.Partials
@using SmartphonePortal_Vervoort_Wagner.Client.Partials.Manufacturer
@using SmartphonePortal_Vervoort_Wagner.Shared.ViewModels
@using System.Text.Json
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Client;

@layout AdminLayout


<div class="max-w-3xl mx-auto">
    <div class="mt-10">
        <h3 class="text-3xl">Manufacturers</h3>
        <hr />
    </div>

    <div class="mt-10">
        @if (IsDataFetched)
        {
            @if (!string.IsNullOrEmpty(Error))
            {
                <div class="flex h-20 bg-red-100 rounded-lg text-center text-xl font-bold my-5">
                    <p class="m-2">
                        @Error
                    </p>
                </div>
            }

            @if (IsEditModalOpen)
            {
                <ManufacturerEditModal OnClose="@OnEditModalClose" Manufacturer="ManufacturerToEdit" />
            }
            @if (IsAddModalOpen)
            {
                <ManufacturerAddModal OnClose="@OnAddModalClose" />
            }
            @if (IsDeleteModalOpen)
            {
                <ManufacturerDeleteModal OnClose="@OnDeleteModalClose" Manufacturer="ManufacturerToDelete" />
            }


            <div class="divide-y">

                <div class="grid grid-cols-12 divide-x overflow-hidden font-bold">
                    <div class="h-10 px-2 pt-2 overflow-hidden">
                        Id
                    </div>
                    <div class="h-10 px-2 pt-2 overflow-hidden col-span-3">
                        Name
                    </div>
                    <div class="h-10 px-2 pt-2 overflow-hidden col-span-3">
                        Description
                    </div>
                    <div class="h-10 px-2 pt-2 overflow-hidden col-span-3">
                        Link to Homepage
                    </div>
                    <div class="h-10 text-center flex justify-center col-span-2 overflow-hidden">
                        <button class="w-full hover:bg-green-300"
                            @onclick=@OpenAddModal>
                            <i class="fa-solid fa-square-plus fa-lg"></i>
                        </button>
                    </div>
                </div>
                @foreach (var manufacturer in ManufacturerModels)
                {
                    <div class="grid grid-cols-12 overflow-hidden divide-x">
                        <div class="h-10 px-2 pt-2 overflow-hidden">
                            @manufacturer.ManufacturerId
                        </div>
                        <div class="h-10 px-2 pt-2 col-span-3 overflow-hidden">
                            @manufacturer.Name
                        </div>
                        <div class="h-10 px-2 pt-2 col-span-3 overflow-hidden">
                            @manufacturer.Description
                        </div>
                        <div class="h-10 px-2 pt-2 col-span-3 overflow-hidden">
                            @if (!string.IsNullOrEmpty(manufacturer.LinkToHomePage))
                            {
                                <a class="text-blue-400 hover:underline hover:text-blue-600"
                       href="@manufacturer.LinkToHomePage">
                                    @manufacturer.LinkToHomePage
                                </a>
                            }
                        </div>
                        <div class="flex h-10 divide-x col-span-2 overflow-hidden">
                            <button class="flex-1 hover:bg-sky-400 focus:bg-sky-400 transition ease-in-out" @onclick="() => OpenEditModal(manufacturer)"><i class="fa-solid fa-pen"></i></button>
                            <button class="flex-1 hover:bg-red-400 focus:bg-red-400 transition ease-in-out" @onclick="() => OpenDeleteModal(manufacturer)"><i class="fa-solid fa-trash"></i></button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <Loader />
        }

        <hr />

    </div>
</div>

@code {
    public List<ManufacturerViewModel> ManufacturerModels { get; set; } = new();
    public bool IsDataFetched { get; set; } = false;
    public string Error { get; set; } = string.Empty;
    public bool IsEditModalOpen { get; set; }
    public bool IsAddModalOpen { get; set; }
    public bool IsDeleteModalOpen { get; set; }

    public ManufacturerViewModel ManufacturerToEdit { get; set; } = new();
    public ManufacturerViewModel ManufacturerToDelete { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchManufacturers();
        await base.OnInitializedAsync();
    }


    // Edit Manufacturer Modal handling
    public async void OnEditModalClose()
    {
        IsEditModalOpen = false;
        await FetchManufacturers();
    }
    public void OpenEditModal(ManufacturerViewModel manufacturer)
    {
        ManufacturerToEdit = manufacturer;
        IsEditModalOpen = true;
        return;
    }

    // Add Manufacturer Modal handling
    public async void OnAddModalClose()
    {
        IsAddModalOpen = false;
        await FetchManufacturers();
    }
    public void OpenAddModal()
    {
        IsAddModalOpen = true;
        return;
    }

    // Delete Manufacturer Modal handling
    public async void OnDeleteModalClose()
    {
        IsDeleteModalOpen = false;
        await FetchManufacturers();
    }
    public void OpenDeleteModal(ManufacturerViewModel manufacturer)
    {
        ManufacturerToDelete = manufacturer;
        IsDeleteModalOpen = true;
        return;
    }


    private async Task FetchManufacturers()
    {
        try
        {
            ManufacturerModels = await Client.GetFromJsonAsync<List<ManufacturerViewModel>>("/api/Manufacturer/all") ?? new();
            //Console.WriteLine(JsonSerializer.Serialize(Smartphones[0]));
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            // idk
            Error = "Some Error occurred: " + ex.Message;
        }
        finally
        {
            IsDataFetched = true;
        }
    }
}
