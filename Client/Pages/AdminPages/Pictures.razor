@page "/admin/pictures"

@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using SmartphonePortal_Vervoort_Wagner.Client.Partials
@using SmartphonePortal_Vervoort_Wagner.Client.Partials.Picture
@using SmartphonePortal_Vervoort_Wagner.Shared.ViewModels
@using System.Text.Json
@attribute [Authorize(Roles = "Admin")]
@inject HttpClient Client;

@layout AdminLayout

<div class="max-w-3xl mx-auto">
    <div class="mt-10">
        <h3 class="text-3xl">Pictures</h3>
        <hr />
    </div>

    <div class="mt-10">
        @if (IsDataFetched)
        {
            @if (!string.IsNullOrEmpty(Error))
            {
                <div class="flex h-20 bg-red-100 rounded-lg text-center text-xl font-bold my-5">
                    <p class="m-2">
                        @Error
                    </p>
                </div>
            }

            @if (IsEditModalOpen)
            {
                <PictureEditModal OnClose="@OnEditModalClose" Phones="SmartphoneModels" Picture="PictureToEdit" />
            }
            @if (IsAddModalOpen)
            {
                <PictureAddModal OnClose="@OnAddModalClose" Phones="SmartphoneModels" />
            }
            @if (IsDeleteModalOpen)
            {
                <PictureDeleteModal OnClose="@OnDeleteModalClose" Picture="PictureToDelete" />
            }

            <MudTable Items="@PictureModels" Dense="@true" Hover="@true" Bordered="@true" Filter="new Func<PictureViewModel,bool>(FilterFunc1)">
                <ToolBarContent>
                    <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh>Id</MudTh>
                    <MudTh>Title</MudTh>
                    <MudTh>Path</MudTh>
                    <MudTh>SmartphoneId</MudTh>
                    <MudTh Class="w-20">
                        <div class="w-20 h-10">
                            <button class="w-full h-full hover:bg-green-300"
                                @onclick=@OpenAddModal>
                                <i class="fa-solid fa-square-plus fa-lg"></i>
                            </button>
                        </div>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Id">@context.PictureId</MudTd>
                    <MudTd DataLabel="Title">@context.Title</MudTd>
                    <MudTd DataLabel="Path">@context.PathToData</MudTd>
                    <MudTd DataLabel="SmartphoneId">@context.SmartphoneId</MudTd>
                    <MudTd>
                        <div class="h-10 flex justify-between">
                            <button class="flex-1 hover:bg-sky-400 focus:bg-sky-400 transition ease-in-out" @onclick="() => OpenEditModal(context)"><i class="fa-solid fa-pen"></i></button>
                            <button class="flex-1 hover:bg-red-400 focus:bg-red-400 transition ease-in-out" @onclick="() => OpenDeleteModal(context)"><i class="fa-solid fa-trash"></i></button>
                        </div>
                    </MudTd>
                </RowTemplate>
            </MudTable>
        }
        else
        {
            <Loader />
        }

        <hr />

    </div>
</div>

@code {
    public List<PictureViewModel> PictureModels { get; set; } = new();
    public List<SmartphoneViewModel> SmartphoneModels { get; set; } = new();
    public bool IsDataFetched { get; set; } = false;
    public string Error { get; set; } = string.Empty;
    public bool IsEditModalOpen { get; set; }
    public bool IsAddModalOpen { get; set; }
    public bool IsDeleteModalOpen { get; set; }

    public PictureViewModel PictureToEdit { get; set; } = new();
    public PictureViewModel PictureToDelete { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        await FetchSmartphones();
        await FetchPictures();
        await base.OnInitializedAsync();
    }


    // Edit Processor Modal handling
    public async void OnEditModalClose()
    {
        IsEditModalOpen = false;
        await FetchPictures();
    }
    public void OpenEditModal(PictureViewModel picture)
    {
        PictureToEdit = picture;
        IsEditModalOpen = true;
        return;
    }

    // Add Processor Modal handling
    public async void OnAddModalClose()
    {
        IsAddModalOpen = false;
        await FetchPictures();
    }
    public void OpenAddModal()
    {
        IsAddModalOpen = true;
        return;
    }

    // Delete Processor Modal handling
    public async void OnDeleteModalClose()
    {
        IsDeleteModalOpen = false;
        await FetchPictures();
    }
    public void OpenDeleteModal(PictureViewModel picture)
    {
        PictureToDelete = picture;
        IsDeleteModalOpen = true;
        return;
    }

    private async Task FetchSmartphones()
    {
        try
        {

            SmartphoneModels = await Client.GetFromJsonAsync<List<SmartphoneViewModel>>("/api/Smartphone/all") ?? new();
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            // idk
            Error = "Some Error occurred: " + ex.Message;
        }
    }

    private async Task FetchPictures()
    {
        try
        {

            PictureModels = await Client.GetFromJsonAsync<List<PictureViewModel>>("/api/Picture/alls") ?? new();
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            // idk
            Error = "Some Error occurred: " + ex.Message;
        }
        finally
        {
            IsDataFetched = true;
        }
    }

    private String searchString1 { get; set; } = string.Empty;
    private bool FilterFunc1(PictureViewModel element) => FilterFunc(element, searchString1);

    private bool FilterFunc(PictureViewModel element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if ($"{element.PictureId} {element.SmartphoneId} {element.PathToData} {element.Title}".Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
}
